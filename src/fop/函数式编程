函数编程的一些基本特点:
    1、函数是“第一等公民”
    2、闭包（Closure）和高阶函数（Higher Order Function）
    3、Lambda演算于函数柯里化（Currying）
    4、懒惰计算（lazy evaluation）
    5、使用递归作为控制流程的机制
    6、引用透明性
    7、没有副作用
组合与范畴
    函数式编程的本质是函数的组合，组合的本质是范畴（Category）
    一个范畴有三部分组成：
        对象（object）
        态射（morphism）
        组合（composition）操作符
高阶函数

    FP语言支持高阶函数，高阶函数就是多阶映射。高阶函数用另一个函数作为其输入参数，也可以返回一个函数作为输出。
Kotlin中使用函数式编程

    在Kotlin中，支持函数作为一等公民。它支持高阶函数、Lambda表达式等。我们不仅可以把函数当做普通变量一样传递、返回，还可以把它
分配给变量、放进数据结构或者进行一般性操作。它们可以是未经命名的，也就是匿名函数。我们也可以直接把一段代码丢到{}中，这就是闭包。

扩展函数
   通过扩展声明完成一个类的新功能扩展，而需继承该类或使用设计模式（例如：装饰设计者模式）